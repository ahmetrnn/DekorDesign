import OpenAI from 'openai';
import type { RoomAnalysisResult } from './types';
import { fallbackRoomAnalysis } from './defaults';

let client: OpenAI | null = null;

function getClient() {
  if (client) return client;
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('Missing OPENAI_API_KEY environment variable.');
  }
  client = new OpenAI({ apiKey });
  return client;
}

function hexFromRgb(rgb: { r: number; g: number; b: number }) {
  const toHex = (value: number) => value.toString(16).padStart(2, '0');
  return `#${toHex(rgb.r)}${toHex(rgb.g)}${toHex(rgb.b)}`;
}

export async function analyzeRoomImage(imageBase64: string): Promise<RoomAnalysisResult> {
  const openai = getClient();
  const response = await openai.responses.create({
    model: 'gpt-4.1-mini',
    input: [
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: 'Analyze this room photo and return JSON with wallColor, floorColor, palette (array of 3 hex colors), brightness (0-1), and style description.'
          },
          { type: 'image', image_base64: imageBase64 }
        ]
      }
    ],
    response_format: {
      type: 'json_schema',
      json_schema: {
        name: 'room_analysis',
        schema: {
          type: 'object',
          properties: {
            wallColor: { type: 'string' },
            floorColor: { type: 'string' },
            palette: {
              type: 'array',
              items: { type: 'string' },
              minItems: 3,
              maxItems: 5
            },
            brightness: { type: 'number' },
            style: { type: 'string' }
          },
          required: ['wallColor', 'floorColor', 'palette', 'brightness', 'style'],
          additionalProperties: false
        }
      }
    }
  });

  const json = response.output?.[0]?.content?.[0];
  if (!json || json.type !== 'json_schema') {
    throw new Error('Failed to parse room analysis response.');
  }

  const payload = json.parsed as RoomAnalysisResult;
  const fallback = fallbackRoomAnalysis();
  return {
    wallColor: payload.wallColor ?? fallback.wallColor,
    floorColor: payload.floorColor ?? fallback.floorColor,
    palette: payload.palette ?? fallback.palette,
    brightness: Math.min(Math.max(payload.brightness ?? fallback.brightness, 0), 1),
    style: payload.style ?? 'contemporary',
    notes: 'Generated by OpenAI Vision'
  };
}

export { fallbackRoomAnalysis } from './defaults';

export function estimateBrightnessFromRgb(rgb: { r: number; g: number; b: number }) {
  const perceived = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
  return Number(perceived.toFixed(2));
}

export function paletteFromRgbPair(
  wall: { r: number; g: number; b: number },
  floor: { r: number; g: number; b: number }
) {
  return [hexFromRgb(wall), hexFromRgb(floor), '#B87C4C'];
}
